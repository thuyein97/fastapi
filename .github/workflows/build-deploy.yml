name: Build and Deploy Code

on:
  push:
    branches: ["main"]

jobs:
  # Build:
  #   environment:
  #     name: testing
  #   env:
  #     DATABASE_HOSTNAME: ${{secrets.DATABASE_HOSTNAME}}
  #     DATABASE_PORT: ${{secrets.DATABASE_PORT}}
  #     DATABASE_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
  #     DATABASE_NAME: ${{secrets.DATABASE_NAME}}
  #     DATABASE_USERNAME: ${{secrets.DATABASE_USERNAME}}
  #     SECRET_KEY: ${{secrets.SECRET_KEY}}
  #     ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
  #     ALGORITHM: ${{secrets.ALGORITHM}}
  #   services:
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_PASSWORD: ${{secrets.DATABASE_PASSWORD}}
  #         POSTGRES_DB: ${{secrets.DATABASE_NAME}}_test
  #       ports:
  #         - 5432:5432
  #       options: >-
  #         --health-cmd pg_isready
  #         --health-interval 10s
  #         --health-timeout 5s
  #         --health-retries 5
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: pulling git repo
  #       uses: actions/checkout@v4
  #     - name: setting up python
  #       uses: actions/setup-python@v4
  #       with:
  #         python-version: 3.9
  #     - name: Update PIP
  #       run: python3 -m pip install --upgrade pip
  #     - name: install all dependencies
  #       run: |
  #         pip install httpx
  #         pip install -r requirements.txt
  #     - name: test with pytest
  #       run: |
  #         pip install pytest
  #         pytest
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      # - name: Build and push
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: ./
      #     file: ./Dockerfile
      #     push: true
      #     tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi:latest
  Deploy:
    environment:
      name: Production
    runs-on: ubuntu-latest
    # needs: [Build]
    steps:
    - name: executing remote ssh commands using password
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: ${{ secrets.PORT }}
        script: |
          cd app/src
          git pull
          sudo systemctl restart api